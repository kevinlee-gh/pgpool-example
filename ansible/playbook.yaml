- name: "Check connectivity to Postgres master"
  hosts: bastion
  vars_files:
    - vars.yaml
  environment: &posgres_envs
    PGDATABASE: postgres
    PGUSER: postgres
    PGPASSWORD: "{{ POSTGRES_PASSWORD }}"
  tasks:
    - name: Check connectivity to Postgres master
      community.postgresql.postgresql_ping:
        login_host: "{{ master_node }}"
      register: master_ping
      until: "master_ping.is_available"
      retries: 3
      delay: 30
      failed_when: not master_ping.is_available
- name: Setup master node
  hosts: bastion
  vars_files:
    - vars.yaml
  environment: *posgres_envs
  tasks:
    - name: Create replicator user
      community.postgresql.postgresql_user:
        login_host: "{{ master_node }}"

        name: replicator
        password: "{{ REPLICATOR_PASSWORD }}"
        role_attr_flags: REPLICATION
    - name: Create database benchmark_db
      community.postgresql.postgresql_db:
        login_host: "{{ master_node }}"
        name: benchmark_db
        comment: "Benchmark database for performance testing"

    - name: Reload Configs
      community.postgresql.postgresql_query:
        login_host: "{{ master_node }}"
        query:
          - SELECT pg_reload_conf()

- name: "Check connectivity to Postgres Replica"
  hosts: bastion
  vars_files:
    - vars.yaml
  environment: *posgres_envs
  tasks:
    - community.postgresql.postgresql_ping:
        login_host: "{{ item }}"
      loop: "{{ rep_nodes }}"
      register: rep_ping
      until: "rep_ping.is_available"
      retries: 5
      delay: 60
      failed_when: not rep_ping.is_available
  
- name: Config Sync reps
  hosts: bastion
  vars_files:
    - vars.yaml
  environment: *posgres_envs
  tasks:
    - community.postgresql.postgresql_alter_system:
        login_host: "{{ master_node }}"

        param: synchronous_standby_names
        value: "node_2"